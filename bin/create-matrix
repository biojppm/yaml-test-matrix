#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
use Data::Dumper;
use FindBin '$Bin';
use YAML::XS qw/ LoadFile /;
use YAML::PP;
use YAML::PP::Highlight;
use IO::All;
use File::Copy qw/ copy /;
use HTML::Template::Compiled;
use POSIX qw/ strftime /;
use Encode;
use FindBin '$Bin';
use lib "$Bin/../lib/perl5";
use YAML::Matrix qw/
    gather_tags
/;

my %tests;
my %invalid;
my %frameworks;
my @frameworks;
my %framework_info;
my %overview;
my %htc_args = (
    tagstyle => [qw/ -classic -comment -jsp +tt /],
    default_escape => 'HTML',
    loop_context_vars => 1,
    post_chomp => 2,
    use_expressions => 1,
);

my @status = (qw/ ok json_ok diff json_diff na error ni correct/);
my @status_invalid = (qw/ invalid_correct invalid_incorrect /);

my $datadir = "$Bin/../yaml-test-suite/data";

my $ypp = YAML::PP->new;
my $not_implemented = $ypp->load_file("ni.yaml");
my $tokens = $ypp->loader->parser->tokens;
my $highlighted = YAML::PP::Highlight->htmlcolored($tokens);

my $id2tag = gather_tags("$datadir/tags");
gather_data();

create_html();

create_overview();

sub gather_data {
    my @files = map { "$_" } grep { not m/-out/ } grep { m/\.yaml$/ } io->dir("matrix/data")->all_files;

    for my $file (sort @files) {
        unless ($file =~ m{/([A-Z0-9.-]+)\.yaml$}i) {
            next;
        }
        my $fw = $1;
        $fw =~ s/\./-/;
        push @frameworks, $fw;
        my $data = LoadFile($file);
        my $testdata = $data->{tests};
        my $info = $data->{info};
        $info->{run} = $data->{date};
        $info->{runtime} = $data->{time};
        $framework_info{ $fw } = info2html($info);

        for my $test (sort keys %$testdata) {
            my $results = $testdata->{ $test };
            my $tags = $id2tag->{ $test } || [];
            @$tags = sort @$tags;

            my $tests = \%tests;
            my @states = @status;
            if ($results->{invalid}) {
                $tests = \%invalid;
                @states = @status_invalid;
                for (qw/ invalid_correct invalid_incorrect /) {
                    if ($results->{ $_ }) {
#                        $overview{ $fw }->{ $_ }++;
                    }
                }
                $frameworks{ $fw }->{invalid}->{count}++;
            }
            else {
                $frameworks{ $fw }->{count}++;
            }

            my $title = $results->{title};
            $tests->{ $test }->{id} = $test;
            $tests->{ $test }->{title} = $title;
            $tests->{ $test }->{frameworks}->{ $fw } = $results;
            $tests->{ $test }->{frameworks}->{ $fw }->{id} = $fw;
            $tests->{ $test }->{tags} = $tags;
            for my $status (@states) {
                if ($results->{ $status }) {
                    $frameworks{ $fw }->{ $status }++;
                    $overview{ $fw }->{ $status }++;
                    for my $tag (@$tags) {
                        $overview{ $fw }->{tags}->{ $status }->{ $tag }++;
                    }
                    my $by_status = $tests->{ $test }->{framework_by_status}->{ $status } ||= [];
                    push @{ $by_status }, { framework => $fw, results => $results };

                }
            }

        }
    }
}

sub create_html {
    mkdir "matrix/html";
    mkdir "matrix/html/details";
    mkdir "matrix/html/css";
    mkdir "matrix/html/js";
    my @tests;
    my @tests_invalid;

    my @framework_names = map {
        my ($lang, $name, $type) = split /[.-]/, $_;
#        $_ = "$lang-$name-$type";
        if ($type !~ m/^(json|event)/) {
            $type = "native";
        }
        {
            lang => $lang,
            name => $name,
            type => $type,
            fullname => $_,
        };
    } @frameworks;
    @framework_names = sort {
        $a->{type} cmp $b->{type}
        || $a->{lang} cmp $b->{lang}
        || $a->{name} cmp $b->{name}
    } @framework_names;


    my %types = (
        valid   => [\%tests, \@tests ],
        invalid => [ \%invalid, \@tests_invalid ],
    );
    for my $type (sort keys %types) {
        my $tests = $types{ $type }->[0];
        my $test_list = $types{ $type }->[1];
        my @tests = sort {
            $tests->{ $a }->{title} cmp $tests->{ $b }->{title}
            || $tests->{ $a }->{id} cmp $tests->{ $b }->{id}
        } keys %$tests;
        for my $test (@tests) {
            my $data = $tests->{ $test };
            my $frameworks = $data->{frameworks};
            my @frameworks;
            for my $fw (@framework_names) {
                my $results = $frameworks->{ $fw->{fullname} };
                $results->{test} = $test;
                if (exists $results->{got_json}) {
                    $results->{got_json_lines} = [split m/\n/, $results->{got_json} ];
                }
                push @frameworks, $results;
            }
            push @$test_list, {
                id => $data->{id},
                title => $data->{title},
                frameworks => \@frameworks,
            };
            create_details($type => $test);
        }
    }
    say "Created detail pages matrix/html/details/<id>.html";
    my @framework_headers;
    for my $fw (@framework_names) {
        push @framework_headers, {
            fullname => $fw->{fullname},
            %{ $frameworks{ $fw->{fullname} } || {} },
        };
    }

    my %selectors;
    for my $fw (@framework_names) {
        push @{ $selectors{ $fw->{type} } }, $fw;
    }
    my @selectors = map {
        +{
            type => $_,
            frameworks => $selectors{ $_ }
        },
    } sort {
        $selectors{ $a }->[0]->{type}
            cmp
        $selectors{ $b }->[0]->{type}
    } keys %selectors;

    for my $type (sort keys %types) {
        my $htc = HTML::Template::Compiled->new(
            filename => "valid.html",
            path => "$Bin/../share/matrix/templates",
            %htc_args,
        );
        my $list = $types{ $type }->[1]->[0];
        $htc->param(
            framework_names => \@framework_names,
            framework_headers => \@framework_headers,
            tests => $types{ $type }->[1],
            selectors => \@selectors,
            $type => 1,
        );

        open my $fh, ">", "matrix/html/$type.html" or die $!;
        print $fh $htc->output;
        close $fh;
        say "Created matrix/html/$type.html";
    }
    {
        my $htc = HTML::Template::Compiled->new(
            filename => "processors.html",
            path => "$Bin/../share/matrix/templates",
            %htc_args,
        );
        $htc->param(
            framework_info => \%framework_info,
        );

        open my $fh, ">", "matrix/html/processors.html" or die $!;
        print $fh $htc->output;
        close $fh;
        say "Created matrix/html/processors.html";
    }

    copy ("share/matrix/css/yaml.css", "matrix/html/css");
    copy ("share/matrix/css/matrix.css", "matrix/html/css");
    copy ("share/matrix/css/sheet.css", "matrix/html/css");
    copy ("share/matrix/css/yaml-tokens.css", "matrix/html/css");
    copy ("share/matrix/js/jquery-3.1.1.min.js", "matrix/html/js");
    copy ("share/matrix/js/matrix.js", "matrix/html/js");
    copy ("share/matrix/js/sheet.js", "matrix/html/js");
}

sub create_overview {

    my $git_cmd = qq{cd $datadir; git log -1 --pretty="format:%h %ad %s" --date=short};
    chomp(my $data_commit = qx{$git_cmd});
    my ($sha, $date, $msg) = split ' ', $data_commit, 3;


    my %overviews = (
        event => {
            descr => 'Compare parsing events',
            valid_columns => [qw/ ok ni diff error na /],
            invalid_columns => [qw/ invalid_correct invalid_incorrect /],
        },
        json => {
            descr => 'Compare loaded data with JSON',
            valid_columns => [qw/ json_ok ni json_diff error na /],
            invalid_columns => [qw/ invalid_correct invalid_incorrect /],
        },
    );
    my ($sum_valid, $sum_invalid) = (0, 0);
    my $factor = 1.3;
    for my $fw (sort {
        my @parts_a = split m/-/, $a;
        my @parts_b = split m/-/, $b;
        $parts_a[-1] cmp $parts_b[-1] ||
        $a cmp $b
    } keys %overview) {
        my $data = $overview{ $fw };
        my %row;
        $row{framework} = $fw;
        $row{framework_info} = $framework_info{ $fw };
        my $format = $row{framework_info}->{format};
        next if $format !~ m/json|event/;
        my $total_valid = 0;
        my $total_invalid = 0;
        my $pass = 0;
        my $fail = 0;
        my $total = 0;
        for my $status (qw/
            ok json_ok diff json_diff na error ni
            invalid_correct invalid_incorrect /) {
            my $count = $data->{ $status };
            $row{ $status } = $count;
            $count ||= 0;
            $total += $count;
            $total_valid += $count unless $status =~ m/invalid/;
            $total_invalid += $count if $status =~ m/invalid/;
        }
        $pass = ($data->{ok} || 0) + ($data->{json_ok} || 0) + $data->{invalid_correct};
        $fail = $total - $pass - ($data->{na} || 0);
        my @percentage_valid;
        my @percentage_invalid;
        my @status_percentage_valid;
        my @status_percentage_invalid;
        if ($fw =~ m/-event$/) {
            @status_percentage_valid = qw/ ok ni diff error /;
            @status_percentage_invalid = qw/ invalid_correct invalid_incorrect /;
        }
        elsif ($fw =~ m/-json$/) {
            @status_percentage_valid = qw/ json_ok ni json_diff error na /;
            @status_percentage_invalid = qw/ invalid_correct invalid_incorrect /;
        }
        else {
            @status_percentage_valid = qw/ na error /;
            @status_percentage_invalid = qw/ invalid_correct invalid_incorrect /;
        }
        for my $i (0 .. $#status_percentage_valid) {
            my $status = $status_percentage_valid[ $i ];
            my $num = $data->{ $status } || 0;
            my $percent = sprintf "%.2f",
                $num / $total_valid * 100;
            my $border = ( $i == 0 )
                    ? 'left'
                    : ($i == $#status_percentage_valid)
                        ? 'right'
                        : 'middle';
            push @percentage_valid, {
                status => $status,
                percent => $percent,
                border => $border,
                width => $num * $factor,
            };
        }
        for my $i (0 .. $#status_percentage_invalid) {
            my $status = $status_percentage_invalid[ $i ];
            my $num = $data->{ $status } || 0;
            my $percent = sprintf "%.2f",
                $num / $total_invalid * 100;
            my $border = ( $i == 0 )
                    ? 'left'
                    : ($i == $#status_percentage_invalid)
                        ? 'right'
                        : 'middle';
            push @percentage_invalid, {
                status => $status,
                percent => $percent,
                border => $border,
                width => $num * $factor,
            };
        }
        $row{percentage_valid} = \@percentage_valid;
        $row{percentage_invalid} = \@percentage_invalid;
        $row{total} = $total;
        $row{pass} = $pass;
        $row{fail} = $fail || '';
        $sum_valid = $total_valid;
        $sum_invalid = $total_invalid;
        push @{ $overviews{ $format }->{views} }, \%row;
    }
    my $htc = HTML::Template::Compiled->new(
        filename => "index.html",
        path => "$Bin/../share/matrix/templates",
        %htc_args,
    );
    $htc->param(
        overview => \%overviews,
        not_implemented => $highlighted,
        sum_valid => $sum_valid,
        sum_invalid => $sum_invalid,
        total => $sum_valid + $sum_invalid,
        width_valid => $sum_valid * $factor + 10,
        width_invalid => $sum_invalid * $factor + 10,
        data_commit => {
            sha => $sha,
            date => $date,
            msg => $msg,
        },
    );
    open my $fh, ">", "matrix/html/index.html" or die $!;
    print $fh $htc->output;
    close $fh;
    say "Created matrix/html/index.html";
}

sub create_details {
    my ($type, $id) = @_;
    my ($main_id) = split m/:/, $id;
    my $idf = $id =~ s{:}{/}r;
    my $yaml = io->file("$datadir/$idf/in.yaml")->encoding('utf-8')->slurp;
    my $events = io->file("$datadir/$idf/test.event")->encoding('utf-8')->slurp;

    my $json;
    my $json_lines;
    if (-f "matrix/expected/$id/in.json") {
        $json = io->file("matrix/expected/$id/in.json")->slurp;
        $json_lines = [ split m/\n/, $json ];
    }
    my $test;
    my @states = qw/ ok json_ok diff json_diff error na ni invalid_correct invalid_incorrect /;
    if ($type eq 'invalid') {
        $test = $invalid{ $id };
        @states = qw/ invalid_incorrect invalid_correct /;
    }
    else {
        $test = $tests{ $id };
    }
    my $by_status = $test->{framework_by_status};
    my @ordered_by_status;
    for my $status (@states) {
        my $list = $by_status->{ $status };
        my @states;
        for my $item (@$list) {
            if ($item->{results}->{ $status }) {
                $item->{results}->{status} = $status;
            }
            push @states, $item;
        }
        push @ordered_by_status, \@states;
    }
    $test->{ordered_by_status} = \@ordered_by_status;

    my $htc = HTML::Template::Compiled->new(
        filename => "details.html",
        path => "$Bin/../share/matrix/templates",
        %htc_args,
    );
    $htc->param(
        id => $id,
        main_id => $main_id,
        test => $test,
        yaml => $yaml,
        json => $json,
        json_lines => $json_lines,
        events => $events,
    );
    open my $fh, ">", "matrix/html/details/$id.html" or die $!;
    print $fh encode_utf8 $htc->output;
    close $fh;
}

sub info2html {
    my ($info) = @_;
    return unless $info;
    $info->{run_date} = strftime("%Y-%m-%d %H:%M GMT", gmtime $info->{run});
    return $info unless $info->{id};

    $info->{language_name} = {
        haskell => "Haskell",
        lua => "Lua",
        nim => "Nim",
        python => "Python",
        ruby => "Ruby",
    }->{ $info->{lang} } || $info->{lang};

    $info->{output_name} = {
        event => "Event Stream",
        json => "JSON",
        native => "Native Data",
        py => "Native Data",
        perl => "Native Data",
        raku => "Native Data",
        yeast => "Native Data",
    }->{ $info->{format} };

    return $info;
}
