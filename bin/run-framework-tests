#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
use Data::Dumper;
use FindBin '$Bin';
use lib "$Bin/../lib/perl5";
use YAML::XS qw/ DumpFile /;
use Encode;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use File::Basename qw/ basename /;
use IO::All;
use File::Path qw/ rmtree /;
use YAML::Matrix qw/
    generate_expected_output
    load_csv
/;

my $docker_user = $ENV{DOCKER_USER} || 'yamlio';

GetOptions(
    "path=s" => \my $path,
    "help|h" => \my $help,
    "list|l" => \my $list,
    "all|a" => \my $all,
    "verbose|v+" => \my $verbose,
    "data-dir=s" => \my $datadir,
    "matrix-dir=s" => \my $matrixdir,
    "framework|f=s" => \my $framework,
);
$verbose ||= 0;
$datadir //= "$Bin/../yaml-test-suite/data";
$matrixdir //= "$Bin/../matrix";

my @frameworks = qw/
    cpp-event
    hs-yaml-event
    hs-yaml-json
    java-json
    java-event
    js-yaml-json
    js-event
    js-json
    libyaml-event
    luajit-json
    nimyaml-event
    perl5-pegex-event
    perl5-pm-pl
    perl5-pm-json
    perl5-pp-event
    perl5-pp-json
    perl5-pp-pl
    perl5-syck-pl
    perl5-syck-json
    perl5-tiny-pl
    perl5-tiny-json
    perl5-xs-pl
    perl5-xs-json
    pyyaml-event
    pyyaml-json
    pyyaml-py
    ruamel-event
    ruamel-json
    ruamel-py
    ruby-json
/;
#    perl6-json
#    perl6-p6

my %frameworks;
@frameworks{ @frameworks } = (1) x @frameworks;

if ($help) {
    usage();
}
elsif ($list) {
    say for @frameworks;
}
elsif ($all) {
    for my $fw (@frameworks) {
        run_tests(
            framework => $fw,
            data => $datadir,
        );
    }
}
elsif ($framework) {
    run_tests(
        framework => $framework,
        data => $datadir,
    );
}
else {
    usage();
}

sub run_tests {
    my %args = @_;
    my %tests;
    my $framework = $args{framework};
    say "-" x 80;
    say "Running $framework";
    my $data = $args{data};

    my $start = time;
    my $end;

    my $out = "$matrixdir/tmp";
    my ($framework_info, $emitters) = gather_framework_info();

    my %info;
    if (not $frameworks{ $framework }) {
        die "Framework $framework not supported";
    }

    mkdir $out;
    if ($path) {
        my @dirs = grep { m{/[A-Z0-9]{4}$} } map { "$_" } io->dir($data)->all;
        for my $dir (sort @dirs) {
            my $id = basename $dir;
            my $in_yaml = "$dir/in.yaml";
            my $cmd = "timeout 3 $path < $in_yaml > $out/$id.stdout 2>$out/$id.stderr";
            print "Running $id\r";
            system $cmd;
            if ($?) {
                my $now = time;
                utime $now, $now, "$out/$id.error";
            }
        }
    }
    else {
        my $cmd = qq{docker run -i --rm --user $<}
            . qq{ -v $datadir:/yaml-test-suite-data}
            . qq{ -v $Bin:/matrix/bin}
            . qq{ -v $matrixdir/tmp:/matrix/tmp}
            . qq{ $docker_user/yaml-editor}
            . qq{ /matrix/bin/run-framework-tests-docker.sh $framework};
        say "Running $cmd";
        system $cmd;
    }
    print "\n";
    $end = time;
    unless ($path) {
        if ($framework_info) {
            my $emitter = $emitters->{ $framework };
            my $repo = $emitter->{reponame};
            my $info = $framework_info->{ $repo };
            @info{qw/
                id output language name reponame provider
                version commit cdate
            /} = (
                $emitter->{id}, $emitter->{output},
                @$info{qw/
                    language name repo provider version commit cdate
                /}
            );
            say "Info: $emitter->{id} $info->{version} $info->{cdate}";
            if ($verbose) {
                print YAML::XS::Dump \%info;
            }
            print "\n";
        }
    }

    my @files = map { "$_" } grep { m{/\w+\.(error|stdout|stderr)$} }
        io->dir("$matrixdir/tmp")->all;
    say "Reading results...";
    for my $file (sort @files) {
        open my $fh, "<", $file or die $!;
        my $got = do { local $/; <$fh> };
        my $dec = decode_utf8($got);
        my @got = split m/\n/, $dec;

        $file = basename $file;
        my ($id, $suffix) = split m/\./, $file;

        if ($suffix eq 'error') {
            $tests{ $id }->{error} = 1;
            next;
        }
        if (@got > 200) {
            @got = (@got[0 .. 200], "----- 8< -----");
        }
        my $got_data = (join "\n", @got) . "\n";
        if (@got) {
            $tests{ $id }->{ $suffix } = $got_data;
        }
        else {
            $tests{ $id }->{ $suffix } = '';
        }

    }
    print "Done\n";
    rmtree $out;

    mkdir "$matrixdir/data";
    say "Saving tests into $matrixdir/data/$framework-out.yaml";
    DumpFile("$matrixdir/data/$framework-out.yaml", {
        tests => \%tests,
        date => time,
        time => $end - $start,
        info => \%info,
    });

}

sub usage {
    say <<"EOM";

Usage:

Run in docker:
    $0 --framework <framework>

Specify a script:
    $0 --framework <framework> --path /path/to/framework

Options:
--framework, -f framework (see -l)
--list, -l      List supported frameworks
--path          /path/to/framework
                If no --path is given, it will run the tests in docker.
--verbose, -v   Increase verbosity
--data-dir      /path/tp/yaml-test-suite/data
--all, -a       Run all frameworks
EOM
    exit 1;
}

sub gather_framework_info {
    my $cmd = qq{docker run -i --rm --user $<}
        . qq{ $docker_user/yaml-editor}
        . q{ cat /yaml-emitters.csv /yaml-frameworks.csv};
    my @lines = qx{$cmd};
    if ($? == 0) {
        chomp @lines;
        my @emitters;
        my @frameworks;
        while (my $line = shift @lines) {
            if ($line =~ m/^repo,/) {
                push @frameworks, $line, @lines;
                last;
            }
            push @emitters, $line;
        }
        my $emitters = load_csv("id", \@emitters);
        my $framework_info  = load_csv("repo", \@frameworks);
        return ($framework_info, $emitters);
    }
}

