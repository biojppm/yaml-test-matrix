#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
use Data::Dumper;
use FindBin '$Bin';
use lib "$Bin/../lib/perl5";
use YAML::XS qw/ DumpFile /;
use Getopt::Long;
Getopt::Long::Configure ("bundling");
use File::Basename qw/ basename /;
use IO::All;
use File::Path qw/ rmtree /;
use YAML::Matrix qw/
    minimal_events minimal_events_for_framework
    cpp_event_to_event java_event_to_event
    generate_expected_output
    normalize_json
/;

my $docker_user = $ENV{DOCKER_USER} || 'yamlio';

GetOptions(
    "path=s" => \my $path,
    "help|h" => \my $help,
    "list|l" => \my $list,
    "all|a" => \my $all,
    "verbose|v+" => \my $verbose,
    "data-dir=s" => \my $datadir,
    "matrix-dir=s" => \my $matrixdir,
    "framework|f=s" => \my $framework,
);
$verbose ||= 0;
$datadir //= "$Bin/../data";
$matrixdir //= "$Bin/../matrix";

my @frameworks = qw/
    cpp-event
    java-json
    java-event
    js-yaml-json
    libyaml-event
    luajit-json
    nimyaml-event
    perl5-pegex-event
    perl5-pm-pl
    perl5-pm-json
    perl5-pp-event
    perl5-syck-pl
    perl5-syck-json
    perl5-tiny-pl
    perl5-tiny-json
    perl5-xs-pl
    perl5-xs-json
    perl6-json
    perl6-p6
    pyyaml-event
    ruamel-event
    ruby-json
/;

my %frameworks;
@frameworks{ @frameworks } = (1) x @frameworks;

write_expected_output();

if ($help) {
    usage();
}
elsif ($list) {
    say for @frameworks;
}
elsif ($all) {
    for my $fw (@frameworks) {
        run_tests(
            framework => $fw,
            data => $datadir,
        );
    }
}
elsif ($framework) {
    run_tests(
        framework => $framework,
        data => $datadir,
    );
}
else {
    usage();
}

sub run_tests {
    my %args = @_;
    my %tests;
    my $framework = $args{framework};
    say "-" x 80;
    say "Running $framework";
    my $data = $args{data};

    my $start = time;
    my $end;

my ($sum_ok, $sum_diff, $sum_na, $sum_err) = (0) x 4;
my $out = "$matrixdir/tmp";
if ($frameworks{ $framework }) {
    mkdir $out;
    if ($path) {
        my @dirs = grep { m{/[A-Z0-9]{4}$} } map { "$_" } io->dir($data)->all;
        for my $dir (sort @dirs) {
            my $id = basename $dir;
            my $in_yaml = "$dir/in.yaml";
            my $cmd = "timeout 3 $path < $in_yaml > $out/$id.error 2>&1";
            print "Running $id\r";
            system $cmd;
            unless ($?) {
                rename "$out/$id.error", "$out/$id.ok" or die $!;
            }
        }
    }
    else {
        my $cmd = qq{docker run -i --rm --user $<}
            . qq{ -v $datadir:/yaml-test-suite-data}
            . qq{ -v $Bin:/matrix/bin}
            . qq{ -v $matrixdir/tmp:/matrix/tmp}
            . qq{ $docker_user/yaml-editor}
            . qq{ /matrix/bin/run-framework-tests-docker.sh $framework};
        say "Running $cmd";
        system $cmd;
    }
    print "\n";
    $end = time;
}
else {
    die "Framework $framework not supported";
}

my @files = map { "$_" } grep { m{/\w+\.(error|ok)$} } io->dir("$matrixdir/tmp")->all;
say "Comparing results...";
for my $file (sort @files) {
    my @got = io->file($file)->chomp->slurp;
    if (@got > 200) {
        @got = (@got[0 .. 200], "----- 8< -----");
    }
    $file = basename $file;
    my ($id, $status) = split m/\./, $file;
    my @test_events = io->file("$data/$id/test.event")->chomp->slurp;
    my ($title) = io->file("$data/$id/===")->chomp->slurp;
    print "Comparing results for $id...\r";
    my $got_data = (join "\n", @got) . "\n";
    $tests{ $id }->{got_data} = $got_data;
    if ($status eq 'error') {
        $tests{ $id }->{error} = 1;
        $sum_err++;
        my $msg = $got_data;
        $msg =~ s/\bat \S+ line .*//s;
        $tests{ $id }->{msg} = $msg;
    }
    elsif ($framework =~ m/-json$/) {
        my $got_json = $got_data;
        $tests{ $id }->{got_json} = $got_json;
        if (-f "$data/$id/in.json") {
            my $exp_json = io->file("$matrixdir/expected/$id/in.json")->slurp;
            $got_json = normalize_json($got_json);
            if ($got_json eq $exp_json) {
                $tests{ $id }->{json_ok} = 1;
                $sum_ok++;
            }
            else {
                $tests{ $id }->{json_diff} = 1;
                $sum_diff++;
            }
        }
        else {
            $tests{ $id }->{na} = 1;
            $sum_na++;
        }
    }
    elsif ($framework =~ m/-(pl|p6)$/) {
        $tests{ $id }->{na} = 1;
        $sum_na++;
    }
    else {
        my @events = @got;
        my @orig_events = @test_events;
        if ($framework =~ /^(pyyaml|ruamel)-event$/) {
            @test_events = io
                ->file("$matrixdir/expected/$id/minimal.$1.event")
                ->chomp->slurp;
            $tests{ $id }->{minimal_events} = \@test_events;
        }
        elsif ($framework eq "cpp-event") {
            @test_events = io
                ->file("$matrixdir/expected/$id/minimal.cpp.event")
                ->chomp->slurp;
            @events = cpp_event_to_event(@events);
            $tests{ $id }->{minimal_events} = \@test_events;
            $tests{ $id }->{transformed_events} = \@events;
        }
        elsif ($framework eq "java-event") {
            @events = java_event_to_event(@events);
            $tests{ $id }->{transformed_events} = \@events;
        }
        my $ok = 1;
        for my $i (0 .. $#events) {
            my $event = $events[ $i ];
            my $exp = $test_events[ $i ];
            if ($event ne $exp) {
                $verbose and
                    warn "$id line ${\($i + 1)}: <$event> ne <$exp>\n";
                $ok = 0;
                last;
            }
        }
        if ($ok) {
            $tests{ $id }->{ok} = 1;
            $sum_ok++;
        }
        else {
            if ($verbose >= 2) {
                warn __PACKAGE__.':'.__LINE__.$".Data::Dumper->Dump([\@events], ['events']);
                warn __PACKAGE__.':'.__LINE__.$".Data::Dumper->Dump([\@test_events], ['test_events']);
                warn __PACKAGE__.':'.__LINE__.$".Data::Dumper->Dump([\@orig_events], ['orig_events']);
            }
            $tests{ $id }->{diff} = 1;
            $sum_diff++;
#                $tests{ $id }->{exp_events} = \@test_events;
            $tests{ $id }->{got_events} = \@got;
        }
    }
    $tests{ $id }->{title} = $title;
}
print "Done                         \n";
printf "ok: %d diff: %d n/a: %d error: %d\n",
    $sum_ok, $sum_diff, $sum_na, $sum_err;
rmtree $out;

say "Saving tests into $matrixdir/data/$framework.yaml";
DumpFile("$matrixdir/data/$framework.yaml", {
    tests => \%tests,
    date => time,
    time => $end - $start,
});

}

sub usage {
    say <<"EOM";

Usage:

Run in docker:
    $0 --framework <framework>

Specify a script:
    $0 --framework <framework> --path /path/to/framework

Options:
--framework, -f framework (see -l)
--list, -l      List supported frameworks
--path          /path/to/framework
                If no --path is given, it will run the tests in docker.
--verbose, -v   Increase verbosity:
                -v  Print the first differing lines of event output
                -vv Dump events and expected events
--data-dir      /path/tp/yaml-test-suite/data
--all, -a       Run all frameworks
EOM
    exit 1;
}

sub write_expected_output {
    say "Generating minimal events and normalized JSON...";
    mkdir "$matrixdir/expected";
    my @dirs = grep { m{/[A-Z0-9]{4}$} } map { "$_" } io->dir($datadir)->all;
    for my $dir (@dirs) {
        my %expected = generate_expected_output($dir);
        my $id = basename $dir;
        my $out = "$matrixdir/expected/$id";
        mkdir $out;
        for my $file (sort keys %expected) {
            io("$out/$file")->print($expected{ $file });
        }
    }
    say "Done ";
}
